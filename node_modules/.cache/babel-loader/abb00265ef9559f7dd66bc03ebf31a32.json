{"ast":null,"code":"var _jsxFileName = \"D:\\\\Interim Files\\\\Compressed\\\\simple-react-js-weather-app\\\\src\\\\containers\\\\App\\\\App.js\";\n//directly import component so we don't have to import React.Component\nimport React, { Component } from \"react\";\n/**\r\n * \r\nusually when you export a function without asserting default you need to use the {}\r\n\r\nimport {x} from ''\r\nif you use export default const x you need to use\r\n\r\nimport x from ''\r\nhere you can change X to whatever variable you want\r\n */\n\nimport { MoonLoader } from \"react-spinners\";\nimport classes from \"./App.module.css\";\nimport assetMapping from \"../../assets/assetMapping.json\";\nimport Card from \"../../elements/Card/Card\";\nimport Header from \"../../components/Header/Header\";\nimport Footer from \"../../components/Footer/Footer\";\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\nimport WeatherDetails from \"../../components/WeatherDetails/WeatherDetails\";\nimport Preview from \"../../components/Preview/Preview\";\nimport ErrorNotice from \"../../components/ErrorNotice/ErrorNotice\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchBarInput: \"\",\n      weatherDetails: {\n        temperature: null,\n        humidity: null,\n        description: \"\"\n      },\n      loading: false,\n      error: false\n    };\n\n    this.searchBarHandler = e => {\n      this.setState({\n        searchBarInput: e.target.value\n      });\n    };\n\n    this.tryAgainHandler = () => {\n      this.setState({\n        searchBarInput: \"\",\n        weatherDetails: {},\n        error: false\n      });\n    };\n\n    this.setWeather = () => {\n      const city = this.state.searchBarInput;\n      const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n      const API_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n      const URL = API_URL + \"?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\");\n      this.setState({\n        weatherDetails: {},\n        loading: true,\n        error: false\n      }, () => {\n        // Executed as callback function\n        fetch(URL).then(res => res.json()).then(data => {\n          // If city exists, update weather details\n          if (data.cod === 200) {\n            this.setState({\n              weatherDetails: {\n                temperature: data.main.temp,\n                humidity: data.main.humidity,\n                description: data.weather[0].main\n              },\n              loading: false\n            });\n          } else {\n            // If city doesn't exist, throw error\n            throw data.cod;\n          }\n        }).catch(err => {\n          console.log(err);\n          this.setState({\n            loading: false,\n            error: true\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    //all conditions reside inside of render function\n    // Conditionally render card content\n    let cardContent = React.createElement(Preview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n\n    if (this.state.loading) {\n      cardContent = React.createElement(MoonLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      });\n    } else if (this.state.error) {\n      cardContent = React.createElement(ErrorNotice, {\n        onClickHandler: this.tryAgainHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    } else if (this.state.weatherDetails.temperature && this.state.weatherDetails.description && this.state.weatherDetails.humidity !== \"\") {\n      // Display weather information if temperature and description exists\n      cardContent = React.createElement(WeatherDetails, {\n        data: this.state.weatherDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.AppWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Header, {\n      color: assetMapping.colors[// Set header color based on weather condition; if error, set color to red\n      this.state.error ? \"error\" : this.state.weatherDetails.description],\n      onClickHandler: this.tryAgainHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), \" \", React.createElement(\"main\", {\n      className: classes.AppMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      value: this.state.searchBarInput,\n      onChangeHandler: this.searchBarHandler,\n      onClickHandler: this.setWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), \" \", React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \" \", cardContent, \" \"), \" \"), \" \", React.createElement(Footer, {\n      onClickHandler: this.tryAgainHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), \" \");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\Interim Files\\Compressed\\simple-react-js-weather-app\\src\\containers\\App\\App.js"],"names":["React","Component","MoonLoader","classes","assetMapping","Card","Header","Footer","SearchBar","WeatherDetails","Preview","ErrorNotice","App","state","searchBarInput","weatherDetails","temperature","humidity","description","loading","error","searchBarHandler","e","setState","target","value","tryAgainHandler","setWeather","city","API_KEY","process","env","REACT_APP_WEATHER_API_KEY","API_URL","URL","fetch","then","res","json","data","cod","main","temp","weather","catch","err","console","log","render","cardContent","AppWrapper","colors","AppMain"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA;;;;;;;;;;;AAUA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;;AAEA,MAAMC,GAAN,SAAkBX,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BY,KAD0B,GAClB;AACNC,MAAAA,cAAc,EAAE,EADV;AAENC,MAAAA,cAAc,EAAE;AACdC,QAAAA,WAAW,EAAE,IADC;AAEdC,QAAAA,QAAQ,EAAE,IAFI;AAGdC,QAAAA,WAAW,EAAE;AAHC,OAFV;AAONC,MAAAA,OAAO,EAAE,KAPH;AAQNC,MAAAA,KAAK,EAAE;AARD,KADkB;;AAAA,SAa1BC,gBAb0B,GAaNC,CAAD,IAAO;AACxB,WAAKC,QAAL,CAAc;AACZT,QAAAA,cAAc,EAAEQ,CAAC,CAACE,MAAF,CAASC;AADb,OAAd;AAGD,KAjByB;;AAAA,SAoB1BC,eApB0B,GAoBR,MAAM;AACtB,WAAKH,QAAL,CAAc;AACZT,QAAAA,cAAc,EAAE,EADJ;AAEZC,QAAAA,cAAc,EAAE,EAFJ;AAGZK,QAAAA,KAAK,EAAE;AAHK,OAAd;AAKD,KA1ByB;;AAAA,SA6B1BO,UA7B0B,GA6Bb,MAAM;AACjB,YAAMC,IAAI,GAAG,KAAKf,KAAL,CAAWC,cAAxB;AACA,YAAMe,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA5B;AACA,YAAMC,OAAO,GAAG,iDAAhB;AACA,YAAMC,GAAG,GAAGD,OAAO,gBAASL,IAAT,oBAAuBC,OAAvB,kBAAnB;AACA,WAAKN,QAAL,CACE;AACER,QAAAA,cAAc,EAAE,EADlB;AAEEI,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT,OADF,EAME,MAAM;AACJ;AACAe,QAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd;AACA,cAAIA,IAAI,CAACC,GAAL,KAAa,GAAjB,EAAsB;AACpB,iBAAKjB,QAAL,CAAc;AACZR,cAAAA,cAAc,EAAE;AACdC,gBAAAA,WAAW,EAAEuB,IAAI,CAACE,IAAL,CAAUC,IADT;AAEdzB,gBAAAA,QAAQ,EAAEsB,IAAI,CAACE,IAAL,CAAUxB,QAFN;AAGdC,gBAAAA,WAAW,EAAEqB,IAAI,CAACI,OAAL,CAAa,CAAb,EAAgBF;AAHf,eADJ;AAMZtB,cAAAA,OAAO,EAAE;AANG,aAAd;AAQD,WATD,MASO;AACL;AACA,kBAAMoB,IAAI,CAACC,GAAX;AACD;AACF,SAjBH,EAkBGI,KAlBH,CAkBUC,GAAD,IAAS;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAKtB,QAAL,CAAc;AACZJ,YAAAA,OAAO,EAAE,KADG;AAEZC,YAAAA,KAAK,EAAE;AAFK,WAAd;AAID,SAxBH;AAyBD,OAjCH;AAmCD,KArEyB;AAAA;;AAuE1B4B,EAAAA,MAAM,GAAG;AACP;AAEA;AACA,QAAIC,WAAW,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;;AACA,QAAI,KAAKpC,KAAL,CAAWM,OAAf,EAAwB;AACtB8B,MAAAA,WAAW,GAAG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;AACD,KAFD,MAEO,IAAI,KAAKpC,KAAL,CAAWO,KAAf,EAAsB;AAC3B6B,MAAAA,WAAW,GAAG,oBAAC,WAAD;AAAa,QAAA,cAAc,EAAE,KAAKvB,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;AACD,KAFM,MAEA,IACL,KAAKb,KAAL,CAAWE,cAAX,CAA0BC,WAA1B,IACA,KAAKH,KAAL,CAAWE,cAAX,CAA0BG,WAD1B,IAEA,KAAKL,KAAL,CAAWE,cAAX,CAA0BE,QAA1B,KAAuC,EAHlC,EAIL;AACA;AACAgC,MAAAA,WAAW,GAAG,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAE,KAAKpC,KAAL,CAAWE,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;AACD;;AAED,WACE;AAAK,MAAA,SAAS,EAAEZ,OAAO,CAAC+C,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,KAAK,EACH9C,YAAY,CAAC+C,MAAb,CACE;AACA,WAAKtC,KAAL,CAAWO,KAAX,GAAmB,OAAnB,GAA6B,KAAKP,KAAL,CAAWE,cAAX,CAA0BG,WAFzD,CAFJ;AAOE,MAAA,cAAc,EAAE,KAAKQ,eAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASK,GATL,EAUE;AAAM,MAAA,SAAS,EAAEvB,OAAO,CAACiD,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,KAAKvC,KAAL,CAAWC,cADpB;AAEE,MAAA,eAAe,EAAE,KAAKO,gBAFxB;AAGE,MAAA,cAAc,EAAE,KAAKM,UAHvB;AAIE,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAWO,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMK,GANL,EAOE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAQ6B,WAAR,MAPF,EAO+B,GAP/B,CAVF,EAkBU,GAlBV,EAmBE,oBAAC,MAAD;AAAQ,MAAA,cAAc,EAAE,KAAKvB,eAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAmBmD,GAnBnD,CADF;AAuBD;;AAhHyB;;AAmH5B,eAAed,GAAf","sourcesContent":["//directly import component so we don't have to import React.Component\r\nimport React, { Component } from \"react\";\r\n\r\n/**\r\n * \r\nusually when you export a function without asserting default you need to use the {}\r\n\r\nimport {x} from ''\r\nif you use export default const x you need to use\r\n\r\nimport x from ''\r\nhere you can change X to whatever variable you want\r\n */\r\nimport { MoonLoader } from \"react-spinners\";\r\n\r\nimport classes from \"./App.module.css\";\r\nimport assetMapping from \"../../assets/assetMapping.json\";\r\nimport Card from \"../../elements/Card/Card\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport WeatherDetails from \"../../components/WeatherDetails/WeatherDetails\";\r\nimport Preview from \"../../components/Preview/Preview\";\r\nimport ErrorNotice from \"../../components/ErrorNotice/ErrorNotice\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    searchBarInput: \"\",\r\n    weatherDetails: {\r\n      temperature: null,\r\n      humidity: null,\r\n      description: \"\",\r\n    },\r\n    loading: false,\r\n    error: false,\r\n  };\r\n\r\n  // Update state with current search bar input\r\n  searchBarHandler = (e) => {\r\n    this.setState({\r\n      searchBarInput: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Reset state after clicking on Logo or Try Again button\r\n  tryAgainHandler = () => {\r\n    this.setState({\r\n      searchBarInput: \"\",\r\n      weatherDetails: {},\r\n      error: false,\r\n    });\r\n  };\r\n\r\n  // Fetch weather information and update state\r\n  setWeather = () => {\r\n    const city = this.state.searchBarInput;\r\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n    const API_URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\n    const URL = API_URL + `?q=${city}&appid=${API_KEY}&units=metric`;\r\n    this.setState(\r\n      {\r\n        weatherDetails: {},\r\n        loading: true,\r\n        error: false,\r\n      },\r\n      () => {\r\n        // Executed as callback function\r\n        fetch(URL)\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            // If city exists, update weather details\r\n            if (data.cod === 200) {\r\n              this.setState({\r\n                weatherDetails: {\r\n                  temperature: data.main.temp,\r\n                  humidity: data.main.humidity,\r\n                  description: data.weather[0].main,\r\n                },\r\n                loading: false,\r\n              });\r\n            } else {\r\n              // If city doesn't exist, throw error\r\n              throw data.cod;\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            this.setState({\r\n              loading: false,\r\n              error: true,\r\n            });\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    //all conditions reside inside of render function\r\n\r\n    // Conditionally render card content\r\n    let cardContent = <Preview />;\r\n    if (this.state.loading) {\r\n      cardContent = <MoonLoader />;\r\n    } else if (this.state.error) {\r\n      cardContent = <ErrorNotice onClickHandler={this.tryAgainHandler} />;\r\n    } else if (\r\n      this.state.weatherDetails.temperature &&\r\n      this.state.weatherDetails.description &&\r\n      this.state.weatherDetails.humidity !== \"\"\r\n    ) {\r\n      // Display weather information if temperature and description exists\r\n      cardContent = <WeatherDetails data={this.state.weatherDetails} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.AppWrapper}>\r\n        <Header\r\n          color={\r\n            assetMapping.colors[\r\n              // Set header color based on weather condition; if error, set color to red\r\n              this.state.error ? \"error\" : this.state.weatherDetails.description\r\n            ]\r\n          }\r\n          onClickHandler={this.tryAgainHandler}\r\n        />{\" \"}\r\n        <main className={classes.AppMain}>\r\n          <SearchBar\r\n            value={this.state.searchBarInput}\r\n            onChangeHandler={this.searchBarHandler}\r\n            onClickHandler={this.setWeather}\r\n            error={this.state.error}\r\n          />{\" \"}\r\n          <Card> {cardContent} </Card>{\" \"}\r\n        </main>{\" \"}\r\n        <Footer onClickHandler={this.tryAgainHandler} />{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}