{"ast":null,"code":"var _jsxFileName = \"D:\\\\Interim Files\\\\Compressed\\\\simple-react-js-weather-app\\\\src\\\\containers\\\\App\\\\App.js\";\n//directly import component from \nimport React, { Component } from 'react';\nimport { MoonLoader } from 'react-spinners';\nimport classes from './App.module.css';\nimport assetMapping from '../../assets/assetMapping.json';\nimport Card from '../../elements/Card/Card';\nimport Header from '../../components/Header/Header';\nimport Footer from '../../components/Footer/Footer';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport WeatherDetails from '../../components/WeatherDetails/WeatherDetails';\nimport Preview from '../../components/Preview/Preview';\nimport ErrorNotice from '../../components/ErrorNotice/ErrorNotice';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchBarInput: '',\n      weatherDetails: {\n        temperature: null,\n        description: ''\n      },\n      loading: false,\n      error: false // Update state with current search bar input\n\n    };\n\n    this.searchBarHandler = e => {\n      this.setState({\n        searchBarInput: e.target.value\n      });\n    };\n\n    this.tryAgainHandler = () => {\n      this.setState({\n        searchBarInput: '',\n        weatherDetails: {},\n        error: false\n      });\n    };\n\n    this.setWeather = () => {\n      const city = this.state.searchBarInput;\n      const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n      const API_URL = 'https://api.openweathermap.org/data/2.5/weather';\n      const URL = API_URL + \"?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\");\n      this.setState({\n        weatherDetails: {},\n        loading: true,\n        error: false\n      }, () => {\n        // Executed as callback function\n        fetch(URL).then(res => res.json()).then(data => {\n          // If city exists, update weather details\n          if (data.cod === 200) {\n            this.setState({\n              weatherDetails: {\n                temperature: data.main.temp,\n                description: data.weather[0].main\n              },\n              loading: false\n            });\n          } else {\n            // If city doesn't exist, throw error\n            throw data.cod;\n          }\n        }).catch(err => {\n          console.log(err);\n          this.setState({\n            loading: false,\n            error: true\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    // Conditionally render card content\n    let cardContent = React.createElement(Preview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n\n    if (this.state.loading) {\n      cardContent = React.createElement(MoonLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    } else if (this.state.error) {\n      cardContent = React.createElement(ErrorNotice, {\n        onClickHandler: this.tryAgainHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    } else if (this.state.weatherDetails.temperature && this.state.weatherDetails.description !== '') {\n      // Display weather information if temperature and description exists\n      cardContent = React.createElement(WeatherDetails, {\n        data: this.state.weatherDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.AppWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Header, {\n      color: assetMapping.colors[// Set header color based on weather condition; if error, set color to red\n      this.state.error ? \"error\" : this.state.weatherDetails.description],\n      onClickHandler: this.tryAgainHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: classes.AppMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      value: this.state.searchBarInput,\n      onChangeHandler: this.searchBarHandler,\n      onClickHandler: this.setWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, cardContent)), React.createElement(Footer, {\n      onClickHandler: this.tryAgainHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\Interim Files\\Compressed\\simple-react-js-weather-app\\src\\containers\\App\\App.js"],"names":["React","Component","MoonLoader","classes","assetMapping","Card","Header","Footer","SearchBar","WeatherDetails","Preview","ErrorNotice","App","state","searchBarInput","weatherDetails","temperature","description","loading","error","searchBarHandler","e","setState","target","value","tryAgainHandler","setWeather","city","API_KEY","process","env","REACT_APP_WEATHER_API_KEY","API_URL","URL","fetch","then","res","json","data","cod","main","temp","weather","catch","err","console","log","render","cardContent","AppWrapper","colors","AppMain"],"mappings":"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","sourcesContent":["//directly import component from \r\nimport React, { Component } from 'react';\r\n\r\n\r\nimport { MoonLoader } from 'react-spinners';\r\n\r\nimport classes from './App.module.css';\r\nimport assetMapping from '../../assets/assetMapping.json';\r\nimport Card from '../../elements/Card/Card';\r\nimport Header from '../../components/Header/Header';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport SearchBar from '../../components/SearchBar/SearchBar';\r\nimport WeatherDetails from '../../components/WeatherDetails/WeatherDetails';\r\nimport Preview from '../../components/Preview/Preview';\r\nimport ErrorNotice from '../../components/ErrorNotice/ErrorNotice';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    searchBarInput: '',\r\n    weatherDetails: {\r\n      temperature: null,\r\n      description: ''\r\n    },\r\n    loading: false,\r\n    error: false\r\n  }\r\n\r\n  // Update state with current search bar input\r\n  searchBarHandler = (e) => {\r\n    this.setState({\r\n      searchBarInput: e.target.value\r\n    })\r\n  }\r\n\r\n  // Reset state after clicking on Logo or Try Again button\r\n  tryAgainHandler = () => {\r\n    this.setState({\r\n      searchBarInput: '',\r\n      weatherDetails: {},\r\n      error: false\r\n    })\r\n  }\r\n\r\n  // Fetch weather information and update state\r\n  setWeather = () => {\r\n    const city = this.state.searchBarInput;\r\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n    const API_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\n    const URL = API_URL + `?q=${city}&appid=${API_KEY}&units=metric`;\r\n    this.setState({\r\n      weatherDetails: {},\r\n      loading: true,\r\n      error: false\r\n    }, () => {\r\n      // Executed as callback function\r\n      fetch(URL)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          // If city exists, update weather details\r\n          if(data.cod === 200) {\r\n            this.setState({\r\n              weatherDetails: {\r\n                temperature: data.main.temp,\r\n                description: data.weather[0].main\r\n              },\r\n              loading: false\r\n            });\r\n          } else {\r\n            // If city doesn't exist, throw error\r\n            throw data.cod\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({\r\n            loading: false,\r\n            error: true\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // Conditionally render card content\r\n    let cardContent = <Preview />;\r\n    if (this.state.loading) {\r\n      cardContent = <MoonLoader />;\r\n    } else if (this.state.error) {\r\n      cardContent = <ErrorNotice onClickHandler={this.tryAgainHandler} />;\r\n    } else if (this.state.weatherDetails.temperature && this.state.weatherDetails.description !== '') {\r\n      // Display weather information if temperature and description exists\r\n      cardContent = <WeatherDetails data={this.state.weatherDetails} />;\r\n    }\r\n\r\n   return (\r\n      <div className={classes.AppWrapper}>\r\n        <Header\r\n          color={assetMapping.colors[\r\n            // Set header color based on weather condition; if error, set color to red\r\n            (this.state.error) ? \"error\" : this.state.weatherDetails.description\r\n          ]}\r\n\r\n          onClickHandler={this.tryAgainHandler} />\r\n        <main className={classes.AppMain}>\r\n          <SearchBar\r\n            value={this.state.searchBarInput}\r\n            onChangeHandler={this.searchBarHandler}\r\n            onClickHandler={this.setWeather}\r\n            error={this.state.error} />\r\n          <Card>\r\n            {cardContent}\r\n          </Card>\r\n        </main>\r\n        <Footer onClickHandler={this.tryAgainHandler} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}